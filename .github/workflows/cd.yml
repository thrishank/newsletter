name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # Set up Docker Buildx for caching and faster builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Cache Cargo dependencies
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install digitalocean-cli and authenticate
        env:
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
        run: |
          sudo snap install doctl
          # sudo snap connect doctl:dot-docker
          doctl registry login -t "$DO_API_TOKEN"

      # - name: Build and push Docker image
      #   run: |
      #     docker build --platform linux/amd64 -t registry.digitalocean.com/email-newsletter/email:latest .
      #     docker push registry.digitalocean.com/email-newsletter/email:latest

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: registry.digitalocean.com/email-newsletter/email:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Deploy on Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key -r migrations "$SSH_USER@$DROPLET_IP:/root/"
          ssh -o StrictHostKeyChecking=no -i private_key "$SSH_USER@$DROPLET_IP" 'bash /root/deploy.sh'
          rm private_key
